import SwiftUI
import Combine
import GRDB

final class WordsGetterViewModel: ObservableObject {
    @Published var words: [WordItem] = []
    @Published var searchText: String = ""
    
    private let windowSize: Int = 1000  // –£–≤–µ–ª–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    private let itemsPerPage: Int = 50  // –£–≤–µ–ª–∏—á–∏–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    
    private var isLoadingPage = false
    private var hasMorePagesUp = true
    private var hasMorePagesDown = true
    
    enum LoadDirection {
        case up
        case down
    }
    
    // –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    func resetPagination() {
        words.removeAll()
        isLoadingPage = false
        hasMorePagesUp = true
        hasMorePagesDown = true
        get(direction: .down)  // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    func get(direction: LoadDirection = .down) {
        guard !isLoadingPage else { return }
        isLoadingPage = true
        
        performDatabaseOperation(
            { db -> [WordItem] in
                let activeDictionaries = try DictionaryItem.fetchActiveDictionaries(in: db)
                guard let selectedDictionary = activeDictionaries.first else {
                    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.")
                    return []
                }
                
                let tableName = selectedDictionary.tableName
                var query = """
                    SELECT *, '\(tableName)' AS tableName 
                    FROM \(tableName)
                """
                
                var whereClauses: [String] = []
                if !self.searchText.isEmpty {
                    let search = self.searchText.lowercased()
                    whereClauses.append("LOWER(word) LIKE '%\(search)%'")
                }
                
                switch direction {
                case .down:
                    if let lastWord = self.words.last {
                        whereClauses.append("id < \(lastWord.id)")
                    }
                    query += whereClauses.isEmpty ? "" : " WHERE " + whereClauses.joined(separator: " AND ")
                    query += " ORDER BY id DESC LIMIT \(self.itemsPerPage)"
                    
                case .up:
                    if let firstWord = self.words.first {
                        whereClauses.append("id > \(firstWord.id)")
                    }
                    query += whereClauses.isEmpty ? "" : " WHERE " + whereClauses.joined(separator: " AND ")
                    query += " ORDER BY id ASC LIMIT \(self.itemsPerPage)"
                }
                
                print("üìù –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å: \(query)")
                let fetchedWords = try WordItem.fetchAll(db, sql: query)
                print("üìä –ü–æ–ª—É—á–µ–Ω–æ \(fetchedWords.count) —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
                return fetchedWords
            },
            successHandler: { [weak self] fetchedWords in
                guard let self = self else { return }
                
                DispatchQueue.main.async {
                    self.updateWords(with: fetchedWords, direction: direction)
                    self.isLoadingPage = false
                }
            },
            errorHandler: { [weak self] error in
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤: \(error)")
                DispatchQueue.main.async {
                    self?.isLoadingPage = false
                }
            }
        )
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ `words` —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    private func updateWords(with fetchedWords: [WordItem], direction: LoadDirection) {
        if fetchedWords.isEmpty {
            switch direction {
            case .down:
                hasMorePagesDown = false
            case .up:
                hasMorePagesUp = false
            }
            print("‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ \(direction).")
            return
        }
        
        switch direction {
        case .down:
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ID
            let newWords = fetchedWords.filter { newWord in
                !self.words.contains(where: { $0.id == newWord.id })
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
            withAnimation {
                self.words.append(contentsOf: newWords)
            }
            
        case .up:
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ID
            let newWords = fetchedWords.filter { newWord in
                !self.words.contains(where: { $0.id == newWord.id })
            }
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            withAnimation {
                self.words.insert(contentsOf: newWords, at: 0)
            }
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ `words`
        if words.count > windowSize {
            let removeCount = words.count - windowSize
            if direction == .down {
                // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞
                words.removeFirst(removeCount)
                print("üóë –£–¥–∞–ª–µ–Ω–æ \(removeCount) —Å–ª–æ–≤ –∏–∑ –Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤–∞.")
            } else {
                // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞
                words.removeLast(removeCount)
                print("üóë –£–¥–∞–ª–µ–Ω–æ \(removeCount) —Å–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞.")
            }
        }
        
        print("‚úÖ –ú–∞—Å—Å–∏–≤ words –æ–±–Ω–æ–≤–ª–µ–Ω. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: \(words.count)")
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    func loadMoreWordsIfNeeded(currentItem word: WordItem?) {
        guard let word = word else { return }
        
        if let index = words.firstIndex(where: { $0.id == word.id }) {
            if index <= 5 && hasMorePagesUp && !isLoadingPage {
                // –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ—Ä—Ö
                get(direction: .up)
            } else if index >= words.count - 5 && hasMorePagesDown && !isLoadingPage {
                // –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –≤–Ω–∏–∑
                get(direction: .down)
            }
        }
    }
    
    // –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    private func performDatabaseOperation<T>(
        _ operation: @escaping (Database) throws -> T,
        successHandler: @escaping (T) -> Void,
        errorHandler: @escaping (Error) -> Void
    ) {
        guard DatabaseManager.shared.isConnected else {
            let error = AppError(
                errorType: .database,
                errorMessage: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞",
                additionalInfo: nil
            )
            errorHandler(error)
            return
        }
        
        DispatchQueue.global(qos: .userInitiated).async {
            do {
                let result = try DatabaseManager.shared.databaseQueue?.read { db in
                    try operation(db)
                }
                if let result = result {
                    successHandler(result)
                }
            } catch {
                errorHandler(error)
            }
        }
    }
}
