import Foundation
import Combine
import GRDB

final class WordsGetterViewModel: ObservableObject {
    @Published var words: [WordItem] = []
    @Published var searchText: String = ""
    
    private let windowSize: Int = 50
    private let itemsPerPage: Int = 20
    private var totalFetchedWords: [WordItem] = []
    private var hasMorePagesUp = true
    private var hasMorePagesDown = true
    var isLoadingPage = false
    
    enum LoadDirection {
        case up
        case down
    }
    
    // –°–±—Ä–æ—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    func resetPagination() {
        hasMorePagesDown = true
        hasMorePagesUp = true
        words.removeAll()
        totalFetchedWords.removeAll()
        print("üîÑ Reset - Up: \(hasMorePagesUp), Down: \(hasMorePagesDown)")
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    func get(direction: LoadDirection = .down) {
        guard !isLoadingPage else {
            print("‚ö†Ô∏è –£–∂–µ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–∞–ø—Ä–æ—Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
            return
        }
        
        isLoadingPage = true
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–æ–≤ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º: \(direction)")
        
        performDatabaseOperation(
            { db in
                let activeDictionaries = try DictionaryItem.fetchActiveDictionaries(in: db)
                guard let selectedDictionary = activeDictionaries.first else {
                    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.")
                    return [WordItem]()
                }
                
                var query = """
                    SELECT *, '\(selectedDictionary.tableName)' AS tableName 
                    FROM \(selectedDictionary.tableName)
                """
                
                if !self.searchText.isEmpty {
                    let search = self.searchText.lowercased()
                    query += " WHERE LOWER(word) LIKE '%\(search)%'"
                }
                
                if direction == .down {
                    if let lastWord = self.totalFetchedWords.last {
                        let lastId = lastWord.id
                        query += self.searchText.isEmpty ? " WHERE " : " AND "
                        query += "id < \(lastId)"
                    }
                    query += " ORDER BY id DESC LIMIT \(self.itemsPerPage)"
                } else if direction == .up {
                    // –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hasMorePagesUp –≤ true
                    self.hasMorePagesUp = true
                    if let firstWord = self.totalFetchedWords.first {
                        let firstId = firstWord.id
                        query += self.searchText.isEmpty ? " WHERE " : " AND "
                        query += "id > \(firstId)"
                    }
                    query += " ORDER BY id ASC LIMIT \(self.itemsPerPage)"
                }
                
                print("üîç SQL –ó–∞–ø—Ä–æ—Å: \(query)")
                let fetched = try SQLRequest<WordItem>(sql: query).fetchAll(db)
                print("üìä –ü–æ–ª—É—á–µ–Ω–æ \(fetched.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î.")
                return fetched
            },
            successHandler: { [weak self] fetchedWords in
                guard let self = self else { return }
                
                if direction == .down {
                    if fetchedWords.isEmpty {
                        self.hasMorePagesDown = false
                        print("‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –≤–Ω–∏–∑.")
                    } else {
                        self.updateVisibleWindow(fetchedWords: fetchedWords, direction: direction)
                    }
                } else if direction == .up {
                    if fetchedWords.isEmpty {
                        self.hasMorePagesUp = true  // –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º true
                        print("‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –≤–≤–µ—Ä—Ö, –Ω–æ hasMorePagesUp –æ—Å—Ç–∞—ë—Ç—Å—è true.")
                    } else {
                        self.updateVisibleWindow(fetchedWords: fetchedWords, direction: direction)
                    }
                }
                
                self.isLoadingPage = false
            },
            errorHandler: { error in
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤: \(error)")
                self.isLoadingPage = false
            }
        )
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ–≥–æ –æ–∫–Ω–∞ —Å–ª–æ–≤
    func updateVisibleWindow(fetchedWords: [WordItem], direction: LoadDirection) {
        if direction == .down {
            totalFetchedWords.append(contentsOf: fetchedWords)
            hasMorePagesDown = fetchedWords.count == itemsPerPage
            if totalFetchedWords.count > windowSize {
                totalFetchedWords.removeFirst(fetchedWords.count)
            }
            let newEnd = totalFetchedWords.count
            let newStart = max(newEnd - windowSize, 0)
            words = Array(totalFetchedWords[newStart..<newEnd])
        } else if direction == .up {
            totalFetchedWords.insert(contentsOf: fetchedWords, at: 0)
            hasMorePagesUp = fetchedWords.count == itemsPerPage
            if totalFetchedWords.count > windowSize {
                totalFetchedWords.removeLast(fetchedWords.count)
            }
            let newStart = 0
            let newEnd = min(windowSize, totalFetchedWords.count)
            words = Array(totalFetchedWords[newStart..<newEnd])
        }
        
        print("üéØ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–∫–Ω–æ: \(words.count) —Å–ª–æ–≤")
        isLoadingPage = false
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    func loadMoreWordsIfNeeded(currentItem word: WordItem?) {
        guard let word = word,
              let currentIndex = words.firstIndex(where: { $0.id == word.id }) else {
            return
        }
        
        print("üëÅÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ - –∏–Ω–¥–µ–∫—Å: \(currentIndex), id: \(word.id), isLoadingPage: \(isLoadingPage), hasMorePagesUp: \(hasMorePagesUp), hasMorePagesDown: \(hasMorePagesDown)")
        
        if currentIndex <= 5 && hasMorePagesUp && !isLoadingPage {
            print("‚¨ÜÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –í–í–ï–†–•")
            get(direction: .up)
        } else if currentIndex >= words.count - 5 && hasMorePagesDown && !isLoadingPage {
            print("‚¨áÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –í–ù–ò–ó")
            get(direction: .down)
        }
    }
    
    // –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    private func performDatabaseOperation<T>(
        _ operation: @escaping (Database) throws -> T,
        successHandler: @escaping (T) -> Void,
        errorHandler: @escaping (Error) -> Void
    ) {
        guard DatabaseManager.shared.isConnected else {
            let error = AppError(
                errorType: .database,
                errorMessage: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞",
                additionalInfo: nil
            )
            errorHandler(error)
            return
        }
        
        DispatchQueue.global(qos: .userInitiated).async {
            do {
                let result = try DatabaseManager.shared.databaseQueue?.read { db in
                    try operation(db)
                }
                DispatchQueue.main.async {
                    if let result = result {
                        successHandler(result)
                    }
                }
            } catch {
                DispatchQueue.main.async {
                    errorHandler(error)
                }
            }
        }
    }
}
